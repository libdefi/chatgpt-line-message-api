"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('child_process');
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cdk = require("@aws-cdk/core");
const semver = require("semver");
const sinon = require("sinon");
const ts_mock_imports_1 = require("ts-mock-imports");
const exec_1 = require("../../lib/api/cxapp/exec");
const logging_1 = require("../../lib/logging");
const settings_1 = require("../../lib/settings");
const bockfs = require("../bockfs");
const util_1 = require("../util");
const mock_child_process_1 = require("../util/mock-child_process");
const mock_sdk_1 = require("../util/mock-sdk");
let sdkProvider;
let config;
beforeEach(() => {
    logging_1.setLogLevel(logging_1.LogLevel.DEBUG);
    sdkProvider = new mock_sdk_1.MockSdkProvider();
    config = new settings_1.Configuration();
    config.settings.set(['output'], 'cdk.out');
    // insert contents in fake filesystem
    bockfs({
        '/home/project/cloud-executable': 'ARBITRARY',
        '/home/project/windows.js': 'ARBITRARY',
        'home/project/executable-app.js': 'ARBITRARY',
    });
    bockfs.workingDirectory('/home/project');
    bockfs.executable('/home/project/cloud-executable');
    bockfs.executable('/home/project/executable-app.js');
});
afterEach(() => {
    logging_1.setLogLevel(logging_1.LogLevel.DEFAULT);
    sinon.restore();
    bockfs.restore();
});
// We need to increase the default 5s jest
// timeout for async tests because the 'execProgram' invocation
// might take a while :\
const TEN_SECOND_TIMEOUT = 10000;
function createApp() {
    const app = new cdk.App({ outdir: 'cdk.out' });
    const stack = new cdk.Stack(app, 'Stack');
    new cdk.CfnResource(stack, 'Role', {
        type: 'AWS::IAM::Role',
        properties: {
            RoleName: 'Role',
        },
    });
    return app;
}
test('cli throws when manifest version > schema version', async () => {
    const app = createApp();
    const currentSchemaVersion = cxschema.Manifest.version();
    const mockManifestVersion = semver.inc(currentSchemaVersion, 'major');
    // this mock will cause the framework to use a greater schema version than the real one,
    // and should cause the CLI to fail.
    const mockVersionNumber = ts_mock_imports_1.ImportMock.mockFunction(cxschema.Manifest, 'version', mockManifestVersion);
    try {
        app.synth();
    }
    finally {
        mockVersionNumber.restore();
    }
    const expectedError = 'This CDK CLI is not compatible with the CDK library used by your application. Please upgrade the CLI to the latest version.'
        + `\n(Cloud assembly schema version mismatch: Maximum schema version supported is ${currentSchemaVersion}, but found ${mockManifestVersion})`;
    config.settings.set(['app'], 'cdk.out');
    await expect(exec_1.execProgram(sdkProvider, config)).rejects.toEqual(new Error(expectedError));
}, TEN_SECOND_TIMEOUT);
test('cli does not throw when manifest version = schema version', async () => {
    const app = createApp();
    app.synth();
    config.settings.set(['app'], 'cdk.out');
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
}, TEN_SECOND_TIMEOUT);
test('cli does not throw when manifest version < schema version', async () => {
    const app = createApp();
    const currentSchemaVersion = cxschema.Manifest.version();
    app.synth();
    config.settings.set(['app'], 'cdk.out');
    // this mock will cause the cli to think its exepcted schema version is
    // greater that the version created in the manifest, which is what we are testing for.
    const mockVersionNumber = ts_mock_imports_1.ImportMock.mockFunction(cxschema.Manifest, 'version', semver.inc(currentSchemaVersion, 'major'));
    try {
        const { lock } = await exec_1.execProgram(sdkProvider, config);
        await lock.release();
    }
    finally {
        mockVersionNumber.restore();
    }
}, TEN_SECOND_TIMEOUT);
test('validates --app key is present', async () => {
    // GIVEN no config key for `app`
    await expect(exec_1.execProgram(sdkProvider, config)).rejects.toThrow('--app is required either in command-line, in cdk.json or in ~/.cdk.json');
});
test('bypasses synth when app points to a cloud assembly', async () => {
    // GIVEN
    config.settings.set(['app'], 'cdk.out');
    writeOutputAssembly();
    // WHEN
    const { assembly: cloudAssembly, lock } = await exec_1.execProgram(sdkProvider, config);
    expect(cloudAssembly.artifacts).toEqual([]);
    expect(cloudAssembly.directory).toEqual('cdk.out');
    await lock.release();
});
test('the application set in --app is executed', async () => {
    // GIVEN
    config.settings.set(['app'], 'cloud-executable');
    mock_child_process_1.mockSpawn({
        commandLine: 'cloud-executable',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
});
test('the application set in --app is executed as-is if it contains a filename that does not exist', async () => {
    // GIVEN
    config.settings.set(['app'], 'does-not-exist');
    mock_child_process_1.mockSpawn({
        commandLine: 'does-not-exist',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
});
test('the application set in --app is executed with arguments', async () => {
    // GIVEN
    config.settings.set(['app'], 'cloud-executable an-arg');
    mock_child_process_1.mockSpawn({
        commandLine: 'cloud-executable an-arg',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
});
test('application set in --app as `*.js` always uses handler on windows', async () => {
    // GIVEN
    sinon.stub(process, 'platform').value('win32');
    config.settings.set(['app'], 'windows.js');
    mock_child_process_1.mockSpawn({
        commandLine: process.execPath + ' windows.js',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
});
test('application set in --app is `*.js` and executable', async () => {
    // GIVEN
    config.settings.set(['app'], 'executable-app.js');
    mock_child_process_1.mockSpawn({
        commandLine: 'executable-app.js',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
});
test('cli throws when the `build` script fails', async () => {
    // GIVEN
    config.settings.set(['build'], 'fake-command');
    mock_child_process_1.mockSpawn({
        commandLine: 'fake-command',
        exitCode: 127,
    });
    // WHEN
    await expect(exec_1.execProgram(sdkProvider, config)).rejects.toEqual(new Error('Subprocess exited with error 127'));
}, TEN_SECOND_TIMEOUT);
test('cli does not throw when the `build` script succeeds', async () => {
    // GIVEN
    config.settings.set(['build'], 'real command');
    config.settings.set(['app'], 'executable-app.js');
    mock_child_process_1.mockSpawn({
        commandLine: 'real command',
        exitCode: 0,
    }, {
        commandLine: 'executable-app.js',
        sideEffect: () => writeOutputAssembly(),
    });
    // WHEN
    const { lock } = await exec_1.execProgram(sdkProvider, config);
    await lock.release();
}, TEN_SECOND_TIMEOUT);
function writeOutputAssembly() {
    const asm = util_1.testAssembly({
        stacks: [],
    });
    bockfs.write('/home/project/cdk.out/manifest.json', JSON.stringify(asm.manifest));
}
//# sourceMappingURL=data:application/json;base64,