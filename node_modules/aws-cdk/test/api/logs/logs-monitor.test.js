"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const logs_monitor_1 = require("../../../lib/api/logs/logs-monitor");
const util_1 = require("../../util");
const mock_sdk_1 = require("../../util/mock-sdk");
let sdk;
let stderrMock;
let monitor;
beforeEach(() => {
    monitor = new logs_monitor_1.CloudWatchLogEventMonitor(new Date(T100));
    stderrMock = jest.spyOn(process.stderr, 'write').mockImplementation(() => { return true; });
    sdk = new mock_sdk_1.MockSdk();
});
afterEach(() => {
    stderrMock.mockRestore();
    monitor.deactivate();
});
test('process events', async () => {
    // GIVEN
    const eventDate = new Date(T0 + 102 * 1000);
    sdk.stubCloudWatchLogs({
        filterLogEvents() {
            return {
                events: [event(102, 'message', eventDate)],
            };
        },
    });
    monitor.addLogGroups({
        name: 'name',
        account: '11111111111',
        region: 'us-east-1',
    }, sdk, ['loggroup']);
    // WHEN
    monitor.activate();
    // need time for the log processing to occur
    await util_1.sleep(1000);
    // THEN
    const expectedLocaleTimeString = eventDate.toLocaleTimeString();
    expect(stderrMock).toHaveBeenCalledTimes(1);
    expect(stderrMock.mock.calls[0][0]).toContain(`[${chalk_1.blue('loggroup')}] ${chalk_1.yellow(expectedLocaleTimeString)} message`);
});
test('process truncated events', async () => {
    // GIVEN
    const eventDate = new Date(T0 + 102 * 1000);
    const events = [];
    for (let i = 0; i < 100; i++) {
        events.push(event(102 + i, 'message' + i, eventDate));
    }
    sdk.stubCloudWatchLogs({
        filterLogEvents() {
            return {
                events,
                nextToken: 'some-token',
            };
        },
    });
    monitor.addLogGroups({
        name: 'name',
        account: '11111111111',
        region: 'us-east-1',
    }, sdk, ['loggroup']);
    // WHEN
    monitor.activate();
    // need time for the log processing to occur
    await util_1.sleep(1000);
    // THEN
    const expectedLocaleTimeString = eventDate.toLocaleTimeString();
    expect(stderrMock).toHaveBeenCalledTimes(101);
    expect(stderrMock.mock.calls[0][0]).toContain(`[${chalk_1.blue('loggroup')}] ${chalk_1.yellow(expectedLocaleTimeString)} message`);
    expect(stderrMock.mock.calls[100][0]).toContain(`[${chalk_1.blue('loggroup')}] ${chalk_1.yellow(expectedLocaleTimeString)} >>> \`watch\` shows only the first 100 log messages - the rest have been truncated...`);
});
const T0 = 1597837230504;
const T100 = T0 + 100 * 1000;
function event(nr, message, timestamp) {
    return {
        eventId: `${nr}`,
        message,
        timestamp: timestamp.getTime(),
        ingestionTime: timestamp.getTime(),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy1tb25pdG9yLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dzLW1vbml0b3IudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFxQztBQUNyQyxxRUFBK0U7QUFDL0UscUNBQW1DO0FBQ25DLGtEQUE4QztBQUU5QyxJQUFJLEdBQVksQ0FBQztBQUNqQixJQUFJLFVBQTRCLENBQUM7QUFDakMsSUFBSSxPQUFrQyxDQUFDO0FBQ3ZDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDZCxPQUFPLEdBQUcsSUFBSSx3Q0FBeUIsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hELFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RixHQUFHLEdBQUcsSUFBSSxrQkFBTyxFQUFFLENBQUM7QUFDdEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ2IsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoQyxRQUFRO0lBQ1IsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFDckIsZUFBZTtZQUNiLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDM0MsQ0FBQztRQUNKLENBQUM7S0FDRixDQUFDLENBQUM7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QUcsRUFBRSxFQUFFO1FBQ2hCLE9BQU87UUFDUCxTQUFTLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUM5QixhQUFhLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRTtLQUNuQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJsdWUsIHllbGxvdyB9IGZyb20gJ2NoYWxrJztcbmltcG9ydCB7IENsb3VkV2F0Y2hMb2dFdmVudE1vbml0b3IgfSBmcm9tICcuLi8uLi8uLi9saWIvYXBpL2xvZ3MvbG9ncy1tb25pdG9yJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQgeyBNb2NrU2RrIH0gZnJvbSAnLi4vLi4vdXRpbC9tb2NrLXNkayc7XG5cbmxldCBzZGs6IE1vY2tTZGs7XG5sZXQgc3RkZXJyTW9jazogamVzdC5TcHlJbnN0YW5jZTtcbmxldCBtb25pdG9yOiBDbG91ZFdhdGNoTG9nRXZlbnRNb25pdG9yO1xuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIG1vbml0b3IgPSBuZXcgQ2xvdWRXYXRjaExvZ0V2ZW50TW9uaXRvcihuZXcgRGF0ZShUMTAwKSk7XG4gIHN0ZGVyck1vY2sgPSBqZXN0LnNweU9uKHByb2Nlc3Muc3RkZXJyLCAnd3JpdGUnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4geyByZXR1cm4gdHJ1ZTsgfSk7XG4gIHNkayA9IG5ldyBNb2NrU2RrKCk7XG59KTtcblxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgc3RkZXJyTW9jay5tb2NrUmVzdG9yZSgpO1xuICBtb25pdG9yLmRlYWN0aXZhdGUoKTtcbn0pO1xuXG50ZXN0KCdwcm9jZXNzIGV2ZW50cycsIGFzeW5jICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgZXZlbnREYXRlID0gbmV3IERhdGUoVDAgKyAxMDIgKiAxMDAwKTtcbiAgc2RrLnN0dWJDbG91ZFdhdGNoTG9ncyh7XG4gICAgZmlsdGVyTG9nRXZlbnRzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXZlbnRzOiBbZXZlbnQoMTAyLCAnbWVzc2FnZScsIGV2ZW50RGF0ZSldLFxuICAgICAgfTtcbiAgICB9LFxuICB9KTtcbiAgbW9uaXRvci5hZGRMb2dHcm91cHMoXG4gICAge1xuICAgICAgbmFtZTogJ25hbWUnLFxuICAgICAgYWNjb3VudDogJzExMTExMTExMTExJyxcbiAgICAgIHJlZ2lvbjogJ3VzLWVhc3QtMScsXG4gICAgfSxcbiAgICBzZGssXG4gICAgWydsb2dncm91cCddLFxuICApO1xuICAvLyBXSEVOXG4gIG1vbml0b3IuYWN0aXZhdGUoKTtcbiAgLy8gbmVlZCB0aW1lIGZvciB0aGUgbG9nIHByb2Nlc3NpbmcgdG8gb2NjdXJcbiAgYXdhaXQgc2xlZXAoMTAwMCk7XG5cbiAgLy8gVEhFTlxuICBjb25zdCBleHBlY3RlZExvY2FsZVRpbWVTdHJpbmcgPSBldmVudERhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XG4gIGV4cGVjdChzdGRlcnJNb2NrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIGV4cGVjdChzdGRlcnJNb2NrLm1vY2suY2FsbHNbMF1bMF0pLnRvQ29udGFpbihcbiAgICBgWyR7Ymx1ZSgnbG9nZ3JvdXAnKX1dICR7eWVsbG93KGV4cGVjdGVkTG9jYWxlVGltZVN0cmluZyl9IG1lc3NhZ2VgLFxuICApO1xufSk7XG5cbnRlc3QoJ3Byb2Nlc3MgdHJ1bmNhdGVkIGV2ZW50cycsIGFzeW5jICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3QgZXZlbnREYXRlID0gbmV3IERhdGUoVDAgKyAxMDIgKiAxMDAwKTtcbiAgY29uc3QgZXZlbnRzOiBBV1MuQ2xvdWRXYXRjaExvZ3MuRmlsdGVyZWRMb2dFdmVudHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkrKykge1xuICAgIGV2ZW50cy5wdXNoKGV2ZW50KDEwMitpLCAnbWVzc2FnZScgKyBpLCBldmVudERhdGUpKTtcbiAgfVxuXG4gIHNkay5zdHViQ2xvdWRXYXRjaExvZ3Moe1xuICAgIGZpbHRlckxvZ0V2ZW50cygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV2ZW50cyxcbiAgICAgICAgbmV4dFRva2VuOiAnc29tZS10b2tlbicsXG4gICAgICB9O1xuICAgIH0sXG4gIH0pO1xuICBtb25pdG9yLmFkZExvZ0dyb3VwcyhcbiAgICB7XG4gICAgICBuYW1lOiAnbmFtZScsXG4gICAgICBhY2NvdW50OiAnMTExMTExMTExMTEnLFxuICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJyxcbiAgICB9LFxuICAgIHNkayxcbiAgICBbJ2xvZ2dyb3VwJ10sXG4gICk7XG4gIC8vIFdIRU5cbiAgbW9uaXRvci5hY3RpdmF0ZSgpO1xuICAvLyBuZWVkIHRpbWUgZm9yIHRoZSBsb2cgcHJvY2Vzc2luZyB0byBvY2N1clxuICBhd2FpdCBzbGVlcCgxMDAwKTtcblxuICAvLyBUSEVOXG4gIGNvbnN0IGV4cGVjdGVkTG9jYWxlVGltZVN0cmluZyA9IGV2ZW50RGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgZXhwZWN0KHN0ZGVyck1vY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxMDEpO1xuICBleHBlY3Qoc3RkZXJyTW9jay5tb2NrLmNhbGxzWzBdWzBdKS50b0NvbnRhaW4oXG4gICAgYFske2JsdWUoJ2xvZ2dyb3VwJyl9XSAke3llbGxvdyhleHBlY3RlZExvY2FsZVRpbWVTdHJpbmcpfSBtZXNzYWdlYCxcbiAgKTtcbiAgZXhwZWN0KHN0ZGVyck1vY2subW9jay5jYWxsc1sxMDBdWzBdKS50b0NvbnRhaW4oXG4gICAgYFske2JsdWUoJ2xvZ2dyb3VwJyl9XSAke3llbGxvdyhleHBlY3RlZExvY2FsZVRpbWVTdHJpbmcpfSA+Pj4gXFxgd2F0Y2hcXGAgc2hvd3Mgb25seSB0aGUgZmlyc3QgMTAwIGxvZyBtZXNzYWdlcyAtIHRoZSByZXN0IGhhdmUgYmVlbiB0cnVuY2F0ZWQuLi5gLFxuICApO1xufSk7XG5cbmNvbnN0IFQwID0gMTU5NzgzNzIzMDUwNDtcbmNvbnN0IFQxMDAgPSBUMCArIDEwMCAqIDEwMDA7XG5mdW5jdGlvbiBldmVudChucjogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcsIHRpbWVzdGFtcDogRGF0ZSk6IEFXUy5DbG91ZFdhdGNoTG9ncy5GaWx0ZXJlZExvZ0V2ZW50IHtcbiAgcmV0dXJuIHtcbiAgICBldmVudElkOiBgJHtucn1gLFxuICAgIG1lc3NhZ2UsXG4gICAgdGltZXN0YW1wOiB0aW1lc3RhbXAuZ2V0VGltZSgpLFxuICAgIGluZ2VzdGlvblRpbWU6IHRpbWVzdGFtcC5nZXRUaW1lKCksXG4gIH07XG59XG4iXX0=