"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const tree_1 = require("../lib/tree");
describe('some', () => {
    const tree = {
        id: 'App',
        path: '',
        children: {
            Tree: {
                id: 'Tree',
                path: 'Tree',
                constructInfo: {
                    fqn: '@aws-cdk/core.Construct',
                    version: '1.162.0',
                },
            },
            stack: {
                id: 'stack',
                path: 'stack',
                children: {
                    bucket: {
                        id: 'bucket',
                        path: 'stack/bucket',
                        children: {
                            Resource: {
                                id: 'Resource',
                                path: 'stack/bucket/Resource',
                                attributes: {
                                    'aws:cdk:cloudformation:type': 'AWS::S3::Bucket',
                                    'aws:cdk:cloudformation:props': {},
                                },
                                constructInfo: {
                                    fqn: '@aws-cdk/aws-s3.CfnBucket',
                                    version: '1.162.0',
                                },
                            },
                        },
                        constructInfo: {
                            fqn: '@aws-cdk/aws-s3.Bucket',
                            version: '1.162.0',
                        },
                    },
                    CDKMetadata: {
                        id: 'CDKMetadata',
                        path: 'stack/CDKMetadata',
                        children: {
                            Default: {
                                id: 'Default',
                                path: 'stack/CDKMetadata/Default',
                                constructInfo: {
                                    fqn: '@aws-cdk/core.CfnResource',
                                    version: '1.162.0',
                                },
                            },
                            Condition: {
                                id: 'Condition',
                                path: 'stack/CDKMetadata/Condition',
                                constructInfo: {
                                    fqn: '@aws-cdk/core.CfnCondition',
                                    version: '1.162.0',
                                },
                            },
                        },
                        constructInfo: {
                            fqn: '@aws-cdk/core.Construct',
                            version: '1.162.0',
                        },
                    },
                },
                constructInfo: {
                    fqn: '@aws-cdk/core.Stack',
                    version: '1.162.0',
                },
            },
        },
        constructInfo: {
            fqn: '@aws-cdk/core.App',
            version: '1.162.0',
        },
    };
    test('tree matches predicate', () => {
        expect(tree_1.some(tree, node => node.constructInfo?.fqn === '@aws-cdk/aws-s3.Bucket')).toBe(true);
    });
    test('tree does not match predicate', () => {
        expect(tree_1.some(tree, node => node.constructInfo?.fqn === '@aws-cdk/aws-lambda.Function')).toBe(false);
    });
    test('childless tree', () => {
        const childless = {
            id: 'App',
            path: '',
            constructInfo: {
                fqn: '@aws-cdk/core.App',
                version: '1.162.0',
            },
        };
        expect(tree_1.some(childless, node => node.path.length > 0)).toBe(false);
    });
});
describe('loadTreeFromDir', () => {
    test('can find tree', () => {
        const tree = tree_1.loadTreeFromDir(path.join(__dirname, 'cloud-assembly-trees/built-with-1_144_0'));
        expect(tree.id).toEqual('App');
    });
    test('cannot find tree', () => {
        const tree = tree_1.loadTreeFromDir(path.join(__dirname, 'cloud-assembly-trees/foo'));
        expect(tree).toEqual({});
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJlZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLHNDQUF1RTtBQUV2RSxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNwQixNQUFNLElBQUksR0FBc0I7UUFDOUIsRUFBRSxFQUFFLEtBQUs7UUFDVCxJQUFJLEVBQUUsRUFBRTtRQUNSLFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRTtnQkFDSixFQUFFLEVBQUUsTUFBTTtnQkFDVixJQUFJLEVBQUUsTUFBTTtnQkFDWixhQUFhLEVBQUU7b0JBQ2IsR0FBRyxFQUFFLHlCQUF5QjtvQkFDOUIsT0FBTyxFQUFFLFNBQVM7aUJBQ25CO2FBQ0Y7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsUUFBUSxFQUFFO29CQUNSLE1BQU0sRUFBRTt3QkFDTixFQUFFLEVBQUUsUUFBUTt3QkFDWixJQUFJLEVBQUUsY0FBYzt3QkFDcEIsUUFBUSxFQUFFOzRCQUNSLFFBQVEsRUFBRTtnQ0FDUixFQUFFLEVBQUUsVUFBVTtnQ0FDZCxJQUFJLEVBQUUsdUJBQXVCO2dDQUM3QixVQUFVLEVBQUU7b0NBQ1YsNkJBQTZCLEVBQUUsaUJBQWlCO29DQUNoRCw4QkFBOEIsRUFBRSxFQUFFO2lDQUNuQztnQ0FDRCxhQUFhLEVBQUU7b0NBQ2IsR0FBRyxFQUFFLDJCQUEyQjtvQ0FDaEMsT0FBTyxFQUFFLFNBQVM7aUNBQ25COzZCQUNGO3lCQUNGO3dCQUNELGFBQWEsRUFBRTs0QkFDYixHQUFHLEVBQUUsd0JBQXdCOzRCQUM3QixPQUFPLEVBQUUsU0FBUzt5QkFDbkI7cUJBQ0Y7b0JBQ0QsV0FBVyxFQUFFO3dCQUNYLEVBQUUsRUFBRSxhQUFhO3dCQUNqQixJQUFJLEVBQUUsbUJBQW1CO3dCQUN6QixRQUFRLEVBQUU7NEJBQ1IsT0FBTyxFQUFFO2dDQUNQLEVBQUUsRUFBRSxTQUFTO2dDQUNiLElBQUksRUFBRSwyQkFBMkI7Z0NBQ2pDLGFBQWEsRUFBRTtvQ0FDYixHQUFHLEVBQUUsMkJBQTJCO29DQUNoQyxPQUFPLEVBQUUsU0FBUztpQ0FDbkI7NkJBQ0Y7NEJBQ0QsU0FBUyxFQUFFO2dDQUNULEVBQUUsRUFBRSxXQUFXO2dDQUNmLElBQUksRUFBRSw2QkFBNkI7Z0NBQ25DLGFBQWEsRUFBRTtvQ0FDYixHQUFHLEVBQUUsNEJBQTRCO29DQUNqQyxPQUFPLEVBQUUsU0FBUztpQ0FDbkI7NkJBQ0Y7eUJBQ0Y7d0JBQ0QsYUFBYSxFQUFFOzRCQUNiLEdBQUcsRUFBRSx5QkFBeUI7NEJBQzlCLE9BQU8sRUFBRSxTQUFTO3lCQUNuQjtxQkFDRjtpQkFDRjtnQkFDRCxhQUFhLEVBQUU7b0JBQ2IsR0FBRyxFQUFFLHFCQUFxQjtvQkFDMUIsT0FBTyxFQUFFLFNBQVM7aUJBQ25CO2FBQ0Y7U0FDRjtRQUNELGFBQWEsRUFBRTtZQUNiLEdBQUcsRUFBRSxtQkFBbUI7WUFDeEIsT0FBTyxFQUFFLFNBQVM7U0FDbkI7S0FDRixDQUFDO0lBRUYsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUNsQyxNQUFNLENBQUMsV0FBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxLQUFLLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1FBQ3pDLE1BQU0sQ0FBQyxXQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEtBQUssOEJBQThCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRyxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDMUIsTUFBTSxTQUFTLEdBQUc7WUFDaEIsRUFBRSxFQUFFLEtBQUs7WUFDVCxJQUFJLEVBQUUsRUFBRTtZQUNSLGFBQWEsRUFBRTtnQkFDYixHQUFHLEVBQUUsbUJBQW1CO2dCQUN4QixPQUFPLEVBQUUsU0FBUzthQUNuQjtTQUNGLENBQUM7UUFFRixNQUFNLENBQUMsV0FBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLHNCQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUNBQXlDLENBQUMsQ0FBQyxDQUFDO1FBQzlGLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUM1QixNQUFNLElBQUksR0FBRyxzQkFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLENBQUMsQ0FBQztRQUMvRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ29uc3RydWN0VHJlZU5vZGUsIGxvYWRUcmVlRnJvbURpciwgc29tZSB9IGZyb20gJy4uL2xpYi90cmVlJztcblxuZGVzY3JpYmUoJ3NvbWUnLCAoKSA9PiB7XG4gIGNvbnN0IHRyZWU6IENvbnN0cnVjdFRyZWVOb2RlID0ge1xuICAgIGlkOiAnQXBwJyxcbiAgICBwYXRoOiAnJyxcbiAgICBjaGlsZHJlbjoge1xuICAgICAgVHJlZToge1xuICAgICAgICBpZDogJ1RyZWUnLFxuICAgICAgICBwYXRoOiAnVHJlZScsXG4gICAgICAgIGNvbnN0cnVjdEluZm86IHtcbiAgICAgICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkNvbnN0cnVjdCcsXG4gICAgICAgICAgdmVyc2lvbjogJzEuMTYyLjAnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHN0YWNrOiB7XG4gICAgICAgIGlkOiAnc3RhY2snLFxuICAgICAgICBwYXRoOiAnc3RhY2snLFxuICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgIGJ1Y2tldDoge1xuICAgICAgICAgICAgaWQ6ICdidWNrZXQnLFxuICAgICAgICAgICAgcGF0aDogJ3N0YWNrL2J1Y2tldCcsXG4gICAgICAgICAgICBjaGlsZHJlbjoge1xuICAgICAgICAgICAgICBSZXNvdXJjZToge1xuICAgICAgICAgICAgICAgIGlkOiAnUmVzb3VyY2UnLFxuICAgICAgICAgICAgICAgIHBhdGg6ICdzdGFjay9idWNrZXQvUmVzb3VyY2UnLFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICdhd3M6Y2RrOmNsb3VkZm9ybWF0aW9uOnR5cGUnOiAnQVdTOjpTMzo6QnVja2V0JyxcbiAgICAgICAgICAgICAgICAgICdhd3M6Y2RrOmNsb3VkZm9ybWF0aW9uOnByb3BzJzoge30sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgICAgICAgICBmcW46ICdAYXdzLWNkay9hd3MtczMuQ2ZuQnVja2V0JyxcbiAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnN0cnVjdEluZm86IHtcbiAgICAgICAgICAgICAgZnFuOiAnQGF3cy1jZGsvYXdzLXMzLkJ1Y2tldCcsXG4gICAgICAgICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBDREtNZXRhZGF0YToge1xuICAgICAgICAgICAgaWQ6ICdDREtNZXRhZGF0YScsXG4gICAgICAgICAgICBwYXRoOiAnc3RhY2svQ0RLTWV0YWRhdGEnLFxuICAgICAgICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgICAgICAgRGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGlkOiAnRGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgcGF0aDogJ3N0YWNrL0NES01ldGFkYXRhL0RlZmF1bHQnLFxuICAgICAgICAgICAgICAgIGNvbnN0cnVjdEluZm86IHtcbiAgICAgICAgICAgICAgICAgIGZxbjogJ0Bhd3MtY2RrL2NvcmUuQ2ZuUmVzb3VyY2UnLFxuICAgICAgICAgICAgICAgICAgdmVyc2lvbjogJzEuMTYyLjAnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIENvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIGlkOiAnQ29uZGl0aW9uJyxcbiAgICAgICAgICAgICAgICBwYXRoOiAnc3RhY2svQ0RLTWV0YWRhdGEvQ29uZGl0aW9uJyxcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgICAgICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkNmbkNvbmRpdGlvbicsXG4gICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAnMS4xNjIuMCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgICAgIGZxbjogJ0Bhd3MtY2RrL2NvcmUuQ29uc3RydWN0JyxcbiAgICAgICAgICAgICAgdmVyc2lvbjogJzEuMTYyLjAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjb25zdHJ1Y3RJbmZvOiB7XG4gICAgICAgICAgZnFuOiAnQGF3cy1jZGsvY29yZS5TdGFjaycsXG4gICAgICAgICAgdmVyc2lvbjogJzEuMTYyLjAnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNvbnN0cnVjdEluZm86IHtcbiAgICAgIGZxbjogJ0Bhd3MtY2RrL2NvcmUuQXBwJyxcbiAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICB9LFxuICB9O1xuXG4gIHRlc3QoJ3RyZWUgbWF0Y2hlcyBwcmVkaWNhdGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNvbWUodHJlZSwgbm9kZSA9PiBub2RlLmNvbnN0cnVjdEluZm8/LmZxbiA9PT0gJ0Bhd3MtY2RrL2F3cy1zMy5CdWNrZXQnKSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgndHJlZSBkb2VzIG5vdCBtYXRjaCBwcmVkaWNhdGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNvbWUodHJlZSwgbm9kZSA9PiBub2RlLmNvbnN0cnVjdEluZm8/LmZxbiA9PT0gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEuRnVuY3Rpb24nKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2NoaWxkbGVzcyB0cmVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNoaWxkbGVzcyA9IHtcbiAgICAgIGlkOiAnQXBwJyxcbiAgICAgIHBhdGg6ICcnLFxuICAgICAgY29uc3RydWN0SW5mbzoge1xuICAgICAgICBmcW46ICdAYXdzLWNkay9jb3JlLkFwcCcsXG4gICAgICAgIHZlcnNpb246ICcxLjE2Mi4wJyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGV4cGVjdChzb21lKGNoaWxkbGVzcywgbm9kZSA9PiBub2RlLnBhdGgubGVuZ3RoID4gMCkpLnRvQmUoZmFsc2UpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnbG9hZFRyZWVGcm9tRGlyJywgKCkgPT4ge1xuICB0ZXN0KCdjYW4gZmluZCB0cmVlJywgKCkgPT4ge1xuICAgIGNvbnN0IHRyZWUgPSBsb2FkVHJlZUZyb21EaXIocGF0aC5qb2luKF9fZGlybmFtZSwgJ2Nsb3VkLWFzc2VtYmx5LXRyZWVzL2J1aWx0LXdpdGgtMV8xNDRfMCcpKTtcbiAgICBleHBlY3QodHJlZS5pZCkudG9FcXVhbCgnQXBwJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Nhbm5vdCBmaW5kIHRyZWUnLCAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IGxvYWRUcmVlRnJvbURpcihwYXRoLmpvaW4oX19kaXJuYW1lLCAnY2xvdWQtYXNzZW1ibHktdHJlZXMvZm9vJykpO1xuICAgIGV4cGVjdCh0cmVlKS50b0VxdWFsKHt9KTtcbiAgfSk7XG59KTsiXX0=