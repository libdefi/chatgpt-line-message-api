"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fc = require("fast-check");
const util_1 = require("../../lib/util");
test('deepSet can set deeply', () => {
    const obj = {};
    util_1.deepSet(obj, ['a', 'b'], 3);
    expect(obj).toEqual({ a: { b: 3 } });
});
test('deepGet can get deeply', () => {
    const obj = { a: { b: 3 } };
    expect(util_1.deepGet(obj, ['a', 'b'])).toBe(3);
});
test('deepGet can return an array', () => {
    const obj = { a: [1, 2, 3] };
    expect(util_1.deepGet(obj, ['a'])).toEqual([1, 2, 3]);
});
test('changing deepClones copy leaves the original intact', () => {
    const original = { a: [{ b: 3 }] };
    const copy = util_1.deepClone(original);
    copy.a[0].c = 5;
    expect(original).toEqual({ a: [{ b: 3 }] });
});
test('deepMerge merges objects', () => {
    const original = { a: { b: 3 } };
    util_1.deepMerge(original, { a: { c: 4 } });
    expect(original).toEqual({ a: { b: 3, c: 4 } });
});
test('deepMerge overwrites non-objects', () => {
    const original = { a: [] };
    util_1.deepMerge(original, { a: { b: 3 } });
    expect(original).toEqual({ a: { b: 3 } });
});
test('deepMerge does not overwrite if rightmost is "undefined"', () => {
    const original = { a: 1 };
    util_1.deepMerge(original, { a: undefined });
    expect(original).toEqual({ a: 1 });
});
describe('splitBySize', () => {
    test('objects are split at the right place', () => {
        fc.assert(fc.property(fc.object(), fc.integer({ min: 2 }), (data, size) => {
            const [first, second] = util_1.splitBySize(data, size);
            expect(Buffer.from(JSON.stringify(first)).length).toBeLessThanOrEqual(size);
            expect(merge(first, second)).toEqual(data);
        }));
        function merge(fst, snd) {
            return { ...(fst ?? {}), ...(snd ?? {}) };
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsib2JqZWN0cy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBQ2pDLHlDQUFxRjtBQUVyRixJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNmLGNBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDNUIsTUFBTSxDQUFDLGNBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7SUFDdkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDN0IsTUFBTSxDQUFDLGNBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHFEQUFx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LENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDNUMsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmYyBmcm9tICdmYXN0LWNoZWNrJztcbmltcG9ydCB7IGRlZXBDbG9uZSwgZGVlcEdldCwgZGVlcE1lcmdlLCBkZWVwU2V0LCBzcGxpdEJ5U2l6ZSB9IGZyb20gJy4uLy4uL2xpYi91dGlsJztcblxudGVzdCgnZGVlcFNldCBjYW4gc2V0IGRlZXBseScsICgpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGRlZXBTZXQob2JqLCBbJ2EnLCAnYiddLCAzKTtcbiAgZXhwZWN0KG9iaikudG9FcXVhbCh7IGE6IHsgYjogMyB9IH0pO1xufSk7XG5cbnRlc3QoJ2RlZXBHZXQgY2FuIGdldCBkZWVwbHknLCAoKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHsgYTogeyBiOiAzIH0gfTtcbiAgZXhwZWN0KGRlZXBHZXQob2JqLCBbJ2EnLCAnYiddKSkudG9CZSgzKTtcbn0pO1xuXG50ZXN0KCdkZWVwR2V0IGNhbiByZXR1cm4gYW4gYXJyYXknLCAoKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHsgYTogWzEsIDIsIDNdIH07XG4gIGV4cGVjdChkZWVwR2V0KG9iaiwgWydhJ10pKS50b0VxdWFsKFsxLCAyLCAzXSk7XG59KTtcblxudGVzdCgnY2hhbmdpbmcgZGVlcENsb25lcyBjb3B5IGxlYXZlcyB0aGUgb3JpZ2luYWwgaW50YWN0JywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbCA9IHsgYTogW3sgYjogMyB9XSB9O1xuICBjb25zdCBjb3B5ID0gZGVlcENsb25lKG9yaWdpbmFsKTtcbiAgY29weS5hWzBdLmMgPSA1O1xuXG4gIGV4cGVjdChvcmlnaW5hbCkudG9FcXVhbCh7IGE6IFt7IGI6IDMgfV0gfSk7XG59KTtcblxudGVzdCgnZGVlcE1lcmdlIG1lcmdlcyBvYmplY3RzJywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbCA9IHsgYTogeyBiOiAzIH0gfTtcbiAgZGVlcE1lcmdlKG9yaWdpbmFsLCB7IGE6IHsgYzogNCB9IH0pO1xuXG4gIGV4cGVjdChvcmlnaW5hbCkudG9FcXVhbCh7IGE6IHsgYjogMywgYzogNCB9IH0pO1xufSk7XG5cbnRlc3QoJ2RlZXBNZXJnZSBvdmVyd3JpdGVzIG5vbi1vYmplY3RzJywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbCA9IHsgYTogW10gfTtcbiAgZGVlcE1lcmdlKG9yaWdpbmFsLCB7IGE6IHsgYjogMyB9IH0pO1xuXG4gIGV4cGVjdChvcmlnaW5hbCkudG9FcXVhbCh7IGE6IHsgYjogMyB9IH0pO1xufSk7XG5cbnRlc3QoJ2RlZXBNZXJnZSBkb2VzIG5vdCBvdmVyd3JpdGUgaWYgcmlnaHRtb3N0IGlzIFwidW5kZWZpbmVkXCInLCAoKSA9PiB7XG4gIGNvbnN0IG9yaWdpbmFsID0geyBhOiAxIH07XG4gIGRlZXBNZXJnZShvcmlnaW5hbCwgeyBhOiB1bmRlZmluZWQgfSk7XG5cbiAgZXhwZWN0KG9yaWdpbmFsKS50b0VxdWFsKHsgYTogMSB9KTtcbn0pO1xuXG5kZXNjcmliZSgnc3BsaXRCeVNpemUnLCAoKSA9PiB7XG4gIHRlc3QoJ29iamVjdHMgYXJlIHNwbGl0IGF0IHRoZSByaWdodCBwbGFjZScsICgpID0+IHtcbiAgICBmYy5hc3NlcnQoXG4gICAgICBmYy5wcm9wZXJ0eShmYy5vYmplY3QoKSwgZmMuaW50ZWdlcih7IG1pbjogMiB9KSwgKGRhdGEsIHNpemUpID0+IHtcbiAgICAgICAgY29uc3QgW2ZpcnN0LCBzZWNvbmRdID0gc3BsaXRCeVNpemUoZGF0YSwgc2l6ZSk7XG5cbiAgICAgICAgZXhwZWN0KEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGZpcnN0KSkubGVuZ3RoKS50b0JlTGVzc1RoYW5PckVxdWFsKHNpemUpO1xuICAgICAgICBleHBlY3QobWVyZ2UoZmlyc3QsIHNlY29uZCkpLnRvRXF1YWwoZGF0YSk7XG4gICAgICB9KSxcbiAgICApO1xuXG4gICAgZnVuY3Rpb24gbWVyZ2UoZnN0OiBhbnksIHNuZDogYW55KSB7XG4gICAgICByZXR1cm4geyAuLi4oZnN0ID8/IHt9KSwgLi4uKHNuZCA/PyB7fSkgfTtcbiAgICB9XG4gIH0pO1xufSk7Il19